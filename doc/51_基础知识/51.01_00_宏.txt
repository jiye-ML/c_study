#define预处理指令用来定义宏

宏可以用来给数字起名字

宏名称通常都是由大写字母构成的
宏名称里不可以包含空格
不要在宏定义语句里使用赋值操作符

编译器会把程序里的所有宏名称替换成
    它所代表的数字

可以在编译时决定宏名称所代表的数字
这个时候需要使用-D选项

宏可以在程序里代表编译时才能确定
    的数字

宏也可以用来给一个计算公式起名字
计算公式里包含未知数字,宏的参数可以
    用来表示这些未知数字

宏的参数可以代表不是数字的内容,所以
    没有配对的类型名称

宏自己的存储区不能用来和函数之间
    进行数据传递

如果希望从宏向函数传递数字就应该优先
    考虑把宏编写成表达式,用表达式的
    结果代表要传递的数字

宏的参数可以直接代表函数的存储区

宏不能保证优先计算内部的操作符,所以
     能当做数字使用的宏必须写在
     小括号里

宏不能保证优先计算参数里面的操作符,
    能当做数字使用的参数也应该写在
    小括号里

不要把自增或自减的结果作为宏的参数使用

编写宏的时候可以使用宏操作符
它们可以实现一些特殊的效果
#是一个宏操作符,它可以把宏的参数转换
    成字符串字面值(在参数的前后各加
    一个双引号)
##也是一个宏操作符,它可以把一个代表
    标识符的参数和其它内容连接得到一个
    新的标识符

条件编译指编译时从几组语句里选择一组
    进行编译而忽略其它组
#ifdef/#ifndef...#else...#endif
以上结构可以实现条件编译的效果
它根据一个宏名称是否存在从两组语句
    里选择一组进行编译
最前面的预处理指令需要从两个里选择
    一个,不论选择哪个后面都要写
    一个宏名称
如果选1择#ifdef就表示宏名称存在的时候
    编译前一组语句,否则编译后一组语句
如果选择#ifndef效果刚好相反

#if...#elif(任意多次)...#else...#endif
这个结构也可以实现条件编译
它可以根据任意逻辑表达式从多组语句中
    选择一组进行编译
#if和#elif预处理指令后都需要写上逻辑
     表达式
这些逻辑表达式里可以包含任意逻辑操作符,
    它们的作用和if分支里逻辑表达式的作用
    类似